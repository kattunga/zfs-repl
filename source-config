#! /bin/bash
# creates a configuration for source system that can be piped to a file

if [ "$1" = "" ]; then
  BIN_NAME="zfs-repl"
else
  BIN_NAME=$1
fi

BIN_FILE=$(dirname $0)/$BIN_NAME

if [ ! -f $BIN_FILE ]; then
  echo "File $BIN_FILE not found"
  exit 1
fi

CFG_FILE=$BIN_FILE.conf

find_bins() {
	# params:
	#	list of exec to find
	#	results var
	[ $# -ne 2 ] && exit 1
	local execs
	local result_var
	local p
	local paths
	local IFS
	local e
	local uid
	declare -a execs=($1)
	result_var=$2
	uid=$(id -u )
	
	#find and check bins
	for e in ${execs[*]}; do
		p=$(which $e 2> /dev/null)
		if [[ $? -ne 0 || $e = "date" ]]; then
			# try to find it
			guess_bin $e
			p="${_guess_bin}"
		fi
		
		# root doesn't need sudo
		if [[ $e == sudo && $uid -eq 0 ]]; then
			p='    '
		fi
		paths="${paths}${p}"$'\n'
	done

	printf -v "${result_var}" '%s' "${paths}"
	
}

guess_bin() {
	# params
	#	exec
	[ $# -ne 1 ] && exit 1
	local ex
	local path_list
	local k
	local cmd
	local IFS
	local out
	ex=$1
	path_list="/sbin /bin /usr/sbin /usr/bin /usr/gnu/bin"
	
	#build command to run
	IFS=' '
	for k in $path_list; do
		if [ -x $k/$ex ]; then 
			out=$k/$ex;
			if [ $ex = date ]; then
				test_date "$out"
				if [ $? -eq 0 ]; then
					break
				else
					out=
				fi
			fi
		else
			out="     "
		fi;
	done
	
	printf -v "_${FUNCNAME}" '%s' "${out}"
}

test_date() {
	# params
	# path to date commmand to test
	local ex
	ex=$1
	$ex --date="-2 days" > /dev/null 2>&1
}

# set rmt commands too as default
declare -a VARS=('SUDO=%s' 'ZFS="$SUDO %s"' 'MBUFFER=%s' 'CAT=%s' 'LOGGER=%s' 'SHUF=%s' 'DATE=%s' 'PV=%s' 'RMT_SUDO=%s' 'RMT_ZFS="$RMT_SUDO %s"' 'RMT_MBUFFER=%s')
EXECS="sudo zfs mbuffer cat logger shuf date pv sudo zfs mbuffer"
BINS=

CONFIG="# commands path for $BIN_NAME"$'\n'

find_bins "$EXECS" "BINS"
IFS=$'\n'
i=0
for v in $BINS; do
	printf -v t "${VARS[$i]}" "$v"
	CONFIG="${CONFIG}${t}"$'\n'
	i=$(( i + 1 ))
done

echo "$CONFIG" > $CFG_FILE

cat << EOF >> $CFG_FILE
##### settings
# default settings
# settings in this file can be over ridden by command line options
#

# notify on success (true/false)
NOTIFY_ON_SUCCESS=false

# notify on error (true/false)
NOTIFY_ON_ERROR=true

# commands to execute on notification
# you can use the vars \$LOG_ERROR_FILE, \$LOG_SUCCESS_FILE and \$LOG_FILE in the hook
# you can find this files in /tmp/zfs_rpl.xxxx
# examples:
#
# NOTIFY_SUCCESS_COMMAND="/usr/local/sbin/telegram-notify --title <hostname> --success --text \$LOG_SUCCESS_FILE"
# NOTIFY_ERROR_COMMAND="/usr/local/sbin/telegram-notify --title <hostname> --error --text \$LOG_ERROR_FILE"
#
# NOTIFY_SUCCESS_COMMAND="cat \$LOG_SUCCESS_FILE | sendmail -F <from email> <to email>"
# NOTIFY_ERROR_COMMAND="cat \$LOG_ERROR_FILE | sendmail -F <from email> <to email>"
#
NOTIFY_SUCCESS_COMMAND=""
NOTIFY_ERROR_COMMAND=""

# log to syslog (true/false)
SYSLOG=true

# date format used in log file
# see 'man date' or 'info date' for options
LOG_DATE_FORMAT="+%Y-%m-%d %H:%M:%S"

# default transport protocol (see 'zfs-repl --help' for valid options)
PROTOCOL=SSH

# custom ssh options
SSH_OPTS=

# use compression for send/receive
COMPRESSION=true

# mbuffer local and remote options for SSHMBUFFER and MBUFFER protocols
# see 'man mbuffer' for options
MBUFFER_OPTS="-s 128k -m 10M -q -v 0"
RMT_MBUFFER_OPTS="-s 128k -m 10M -q"

# seconds to wait for MBUFFER protocol to initiate send/receive connection before timing out
MBUFFER_INIT_TIMEOUT=120

# for MBUFFER protocol set the default port
# 'auto' picks a number within the range specified in PORT_RANGE
# this is helpful when your running multiple concurrent replications to the same host
MBUFFER_PORT='auto'
MBUFFER_PORT_RANGE=60000-65000

EOF



