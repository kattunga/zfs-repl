#!/bin/bash
#
# Date: 2017-06-05
# Version: 3.0.0
#
# Credits: 
#    Mike La Spina for the original concept and script http://blog.laspina.ca/
#    kattunga
#      http://linuxzfs.blogspot.com/2012/08/zfs-replication-script.html
#      https://github.com/kattunga/zfs-scripts.git
#    slefevre
#    whorfin
#
# Function:
#    Provides snapshot and send process which replicates a ZFS dataset from a source to target server.
#    Maintains a runing snapshot archive for X time
#
# Enhancements/Fixes:
# 2017.06.05
#   - removed option to compare, it is wrong because compare a live filesystem
#   - removed netcat / socat protocols
#   - compresion is only admited in SSH protocol and use the native compression
#   - encryption is nativelly included in ssh and has no reason in other protocols where you want high speed
# 2014.11.19
# by slefevre
#   - fix grep options and globs to be more portable across platforms in clean_old_snaps()
# 2014.11.18
# by slefevre
#   - fixed logic in clean_old_snaps() for checking snapshot time-stamp in snapshot name
#     fix prevents snapshots created outside zfs-repl from being inadvertantly deleted by clean_old_snaps()
#   - fix issue in clean_old_snaps() w/ '-' (dash) or other potential problematic characters in snapshot name
# 2014.20.23
# by slefevre
#   - fixed logic bug in clean_remote_snaps function so that the following use cases work properly
#      --clean-snap
#      --clean-snap --prefix xxx
#      --clean-snap --prefix xxx --invert-clean
#      --clean-snap --prefix xxx --invert-clean --force-clean
#   - fixed typo
# 2014.10.21
# by slefevre
#   - fix bug with deletion of recursive snapshots in clean_remote_snaps function.
#   - added --force-clean option for use with --clean-snaps. it forces deletion of snapshots and 
#     ignores if snap is on source
# 2014.10.14
# by slefevre
#   - Incorporate majority of whorfin's pull request changes
#   - fix remote netcat option
#   - Added --invert-clean option used to reverse the snapshot selection logic of --clean-snaps
#     When used w/ --prefix & --clean-snaps it keeps all snapshots matching the prefix and deletes all other
#     snapshots on the target system through the clean_remote_snaps function.
#   - Added --clean-after option to run clean_remote_snaps function after replication.
# 2014.06/23
# by whorfin
#   - Pipeline construction sends ALL stderr of pipeline to ERR_LOG
#     This is good as we catch any problems including zfs send
#     or compress/decompress/en/decrypt/socket errors, but breaks PV stats
#     so --stats option is removed
# 2014.06/20
# by whorfin
#   - All pipeline optimization collapsed; SSH not separate pipe build
#     This means stats now work for SSH, and one could be
#     extra paranoid and further encrypt the stream sent over SSH
# 2014.06/19
# by whorfin
#   - Cleanup SSH optimization branch
# 2014.06/18
# by whorfin
#   - Pipeline for non-SSH case is optimized; no more "| cat - |"
#   - Fixes to really do the things previously promised...
#   - TODO [?]: note that if a recursive replication fails for a
#     sub-branch, manual intervention will be required.
#     Delete parent snapshots on target back to the most recent snap
#     present for all children, then run with "--no-snap"
# 2014.06/17
# by whorfin
#   - Important Bugfix: lack of quotes on echo and "^$" on grep -c meant
#     substrings could match in clean_remote_snaps
#   - Preparing for optimized pipes; already optimize SSH
# 2014.06/16
# by whorfin
#   - socat run in unidirectional mode, "STDIO" explicit
#   - Added socat command and TCP socket argument mechanisms
#   - Add OmniOS/SmartOS "pkgin" paths to find socat
#  2014.06/01
#  by  slefevre
#    - added --no-email option to supress email of log. Overrides config file.
#  2014.05.30
#  by  slefevre
#    - fix --no-repl logic in launch_check
#  2014.05.28
#  by slefevre
#    - fix typo
#  2014.05.14
#   By slefevre
#    - bug fix to correctly destroy snapshots recursively when --recurse|-R option used
#  2014.02.23
#   By slefevre
#    - added --force-recv option
#    - fixed bug in launch_check
#  2014.02.17
#   By slefevre
#   - fixed bug in recursive snapshot replication
#   - removed '-F' from 'zfs recv' on replications to avoid deleting snapshots on dest unintentionally
#   - missing quotes
#  2014.02.16
#   By slefevre
#   - added recursive snapshot command line switch
#   - fix --no-repl logic
#   - on target changed to 'gzip -dc' from 'zcat' since on some systems zcat != gzcat
#      note: you will need to re-run target-config to update config 
#   - add pre-run check for commands to confirm options & config are supported
#  2014.02.12
#   By slefevre
#   - Bug fixes
#	- added option to specify ip4 or ip6 connections exclusively
#  2014.02.07
#   By slefevre
#   - handle condition where 'zfs recv' doesn't start timely. (Create a initiation timeout period.)
#  2014.02.05
#   By slefevre
#   - fixed timing issue where 'zfs send' thread started before 'zfs recv' thread was started
#  2014.02.02
#   By slefevre
#   - added long command line options, arg checking, general clean up and polishing
#   - added support for xz compression
#   - added support for encrypted transfer over non-ssh replication
#   - added --stats option
#   - consolidated some coding to eliminate duplicate code
#  2013.04.16
#	By slefevre
#	- added support for mbuffer protocol
#  2013.04.09
#	By slefevre
#	-made snapshot cleanup functions restrictive to prefix (-f option) value.  No prefix == all snapshots
#  2013.04.05
#	By: slefevre
#	-added syslog capability
#  2013.04.03
#	By: slefevre
# 	-added -q option for crontab scheduling w/out emails
#  2013.04.02
#	By: slefevre
#	-support for other *nix platforms (CentOS, OpenIndiana)
#	-support for longer retention level on target server (added -T option)
#	-support for config file (zfs-replicate.conf)
#	-support for non-root user on target system (can use -h user@target instead of -h target but user must be setup for sudo)
#	-fixed a few typos
#	-added log option
#	-better isolation of lock & err files better concurrenct replication of different source paths
#
#
# configuration file(s) path
CONFIG_PATH=$(dirname $0)
CONFIG_SOURCE=$(basename $0)

#######################################################################################
##################### Do not touch anything below this line ###########################
#######################################################################################

NOTIFY_ON_ERROR=false
NOTIFY_ON_SUCCESS=false

NOTIFY_SUCCESS_COMMAND=
NOTIFY_ERROR_COMMAND=

SYSLOG=false
LOG_DATE_FORMAT="+%Y-%m-%d %H:%M:%S"

PROTOCOL=SSH

SSH_OPTS=
COMPRESSION=true

MBUFFER_OPTS="-s 128k -m 256M -q"
RMT_MBUFFER_OPTS="-s 128k -m 256M -q"

MBUFFER_INIT_TIMEOUT=120
MBUFFER_PORT='auto'
MBUFFER_PORT_RANGE=60000-65000

#local bins
ZFS=
LOGGER=
MBUFFER=
DATE=
SHUF=

#target host bins
RMT_ZFS=
RMT_MBUFFER=

# parsed parameters (defaults)
TGT_HOST=
SSH_TGT_HOST=
SSH_TGT_PORT=
SRC_PATH=
SRC_CLONE=
SRC_CLONE_OPTS=
TGT_PATH=
TGT_CLONE=
TGT_CLONE_OPTS=
SNAP_PREF=
MAX_TIME=
RMT_MAX_TIME=
VERBOSE=
CLEAN=false
INVERT_CLEAN=false
CLEAN_AFTER=false
FORCE_CLEAN=false
SNAPSHOT=true
RECURSIVE_SNAP=
RECURSIVE_REPL=
REPLICATE=true
CREATEFS=false
QUIET=false
DEBUG=false
STATS=false
ZFS_CREATE_OPTS=
FORCE_RECV=

# files
LOCK_PATH=/var/lock

TMP_PATH=/tmp/$(basename $0 .sh).$$
DSNAP_LIST=$TMP_PATH/snaplist-target.lst
SNAP_LIST=$TMP_PATH/snaplist.lst

LOG_SUCCESS_FILE=$TMP_PATH/log_ok
LOG_ERROR_FILE=$TMP_PATH/log_error
LOG_FILE=$TMP_PATH/log

# values: none, init, finished
REPL_STATUS=none
NOTIFICATION_SENT=false

declare -a on_exit_items
####################################Function###########################################
#
# on exit
#
on_exit() {
	sig="$1"; shift
	[ $DEBUG == true ] && log "on_exit: signal = $sig"
    for i in "${on_exit_items[@]}"; do
        [ $DEBUG == true ] && log "on_exit: $i"
        eval $i
    done
    # propigate the sig
    if [ $sig != EXIT ]; then
    	trap - $sig EXIT
    	kill -s $sig $$
    fi
}

####################################Function###########################################
#
# on exit run
#
on_exit_run() {
    local n=${#on_exit_items[*]}
    on_exit_items[$n]="$*"
    if [[ $n -eq 0 ]]; then
        [ $DEBUG == true ] && log "Setting trap"
        for sig in EXIT HUP INT QUIT PIPE TERM; do
        	[ $DEBUG == true ] && log "trap \"on_exit $sig\" $sig"
        	trap "on_exit $sig" $sig
        done
    fi
}

#######################################################################################
####################################Function###########################################
#######################################################################################
#
# usage
#
usage() {
	echo "Usage: $(basename $0) "
	echo "  -H --host               target [user@]host"
	echo "  -p --port               target ssh port"
	echo "  -s --source             source zfs dataset"
	echo "  -d --dest               target zfs dataset (default = source)"
	echo "  -f --prefix             snapshot prefix"
	echo "  -t --snap-retain        max time to preserve/retain snapshots"
	echo "                           e.g. \"7 days ago\", \"12 hours ago\" (default infinite)"
	echo "  -T --dest-snap-retain   max time to preserve snapshots on target. (default to --snap-retain)"
	echo "                           (see -t option for examples)"
	echo "  -O --dest-opt           options to apply to zfs command when creating dataset. Repeat for each option"
	echo "                           same options as 'zfs create -o' (see man zfs) "
	echo "                           e.g. -O compression=lz4 -O dedupe=on -O recordsize=4k"
	echo "  -R --recurse            recursively create and replicate snapshots of all descendent datasets"
	echo "     --dest-clone         create a clone of last target snapshot with name specified"
	echo "     --dest-clone-opt     options to apply to zfs command when creating a target clone. see --dest-opt"
	echo "     --source-clone       create a clone of last snapshot with name specified"
	echo "     --source-clone-opt   options to apply to zfs command when creating clone. see --dest-opt"
	echo "  -F --force-recv         Force receive on target dataset. See 'man zfs -F'"
	echo "  -v --verbose            verbose"
	echo "  -c --clean-snaps        clean snapshots in target that are not in source before replication"
	echo "     --invert-clean       reverse the --clean-snaps logic so snapshot prefix is not deleted"
	echo "     --clean-after        clean snapshots in target that are not in source after replication"
	echo "     --force-clean        use w/ --clean-snaps to force target snapshot deletion ignores if snap is in source"
	echo "  -n --no-snap            do not snapshot"
	echo "  -r --no-repl            do not replicate"
	echo "  -z --create-dest        create target file system/dataset if not exists"
	echo "  -o --protocol           replication transport protocol"
	echo "         SSH              Secure. Recomended for low latency and stable wan"
	echo "         SSHMBUFFER       Secure, has buffering. Recommended for high latency wan"
	echo "         MBUFFER          Insecure. Require a TCP port for replication. Recommended for private lan or vpn"
	echo "  -P --mbuffer-port       replication port for MBUFFER protocol. (default: auto)"
	echo "  -q --quiet              quiet. suppress output to stdout. usefull for cron jobs"
	echo "     --notify-errors      execute notification command on errors"
	echo "     --notify             execute notification command on success"
	echo "     --no-notify          deactivate notification commands"
	echo "  -D --debug              show diagnositc information"
	echo "  -h --help               display usage options "
	exit 
}

#######################################################################################
#
# Function check source/target commands
#
check_cmd() {
	# params
	# source/target test
	# exec var_name
	# exec name
	# option message
	local sys
	local var_name
	local exec_name
	local opt_msg
	[ $# -lt 3 ] && exit 1
	sys=$1
	shift
	var_name=$1
	shift
	exec_name=$1
	shift
	opt_msg="$*"
	
	case $sys in
		source)
			[ -x "${!var_name}" ] || log_error "ERROR: ${exec_name} not defined, not found, or not executable on source system.  Check ${var_name}= value in /etc/$(basename $0 .sh)/$(basename $0 .sh).conf. \'$opt_msg\' isn't available with current configuration!"
			;;
		target)
			[ -z "${!var_name}" ] && log_error "ERROR: ${exec_name} is not defined for target system. Check ${var_name}= value in /etc/$(basename $0 .sh)/${TGT_HOST}.conf. '$opt_msg' isn't available with current configuration!"
			;;
	esac

}

#######################################################################################
#
# Function check setting before launching anything
#
launch_check() {
	local option

	if [[ "$MAX_TIME" != "" || "$RMT_MAX_TIME" != "" ]]; then
		check_cmd "source" "DATE" "GNU date" "-t|--snap-retain|-T|--dest-snap-retain"
	fi

	if [ $REPLICATE == false ] ; then
		return
	fi

	# Check if needed commands for replication are available
	#
	PROTOCOL=${PROTOCOL^^}
	case $PROTOCOL in
		SSHMBUFFER)
			option="-o|--protocol MBUFFER"
			check_cmd "source" "MBUFFER" "mbuffer" "$option"
			check_cmd "target" "RMT_MBUFFER" "mbuffer" "$option"
			;;
		MBUFFER)
			option="-o|--protocol MBUFFER"
			check_cmd "source" "MBUFFER" "mbuffer" "$option"
			check_cmd "target" "RMT_MBUFFER" "mbuffer" "$option"
			;;
	esac

	if [ $MBUFFER_PORT = 'auto' ]; then
		check_cmd "source" "SHUF" "shuf" "-P|--mbuffer-port auto"
	fi
}

#######################################################################################
#
# Function generate replication status 
#
replication_status() {
	if [ $# -eq 1 ]; then 
		case ${1,,} in
			none|init|finished)
				REPL_STATUS=${1,,}
				;;
		esac
	else
		case $REPL_STATUS in
			none|finished)
				;;
			init)
				echo "ERROR: zfs replication failed." >> $LOG_ERROR_FILE
				echo "zfs receive thread may have failed to start." >> $LOG_ERROR_FILE
				;;
		esac
	fi
}

#######################################################################################
#
# Function execute notification commands file
#
execute_notification() {
	if [ $NOTIFICATION_SENT = false ]; then

		# notification on error
		if [[ $NOTIFY_ON_ERROR == true && "$NOTIFY_ERROR_COMMAND" != "" && -s $LOG_ERROR_FILE ]]; then
			eval $NOTIFY_ERROR_COMMAND > /dev/null
			[ $DEBUG = true ] && log "DEBUG: notification command executed $NOTIFY_ERROR_COMMAND"

		# notification on success
		else
			if [[ $NOTIFY_ON_SUCCESS == true && "$NOTIFY_SUCCESS_COMMAND" != "" ]]; then
				eval $NOTIFY_SUCCESS_COMMAND > /dev/null
				[ $DEBUG = true ] && log "DEBUG: notification command executed $NOTIFY_SUCCESS_COMMAND"
			fi
		fi

		# execute notification only once
		NOTIFICATION_SENT=true
	fi
}

#######################################################################################
#
# Function log to std out and log file(s)
#
log() {

	# if log has new lines, log each line separately
	if [[ $1 == *$'\n'* ]]; then
		local IFS=$'~'
		for l in ${1//$'\n'/'~   '}; do
			log "$l"
		done
		return
	fi

	# don't output blank lines
	if [ -n "$1" ] && [ "$1" != "" ]; then

		date_line=$($DATE "$LOG_DATE_FORMAT")

		# to console
		if [ $QUIET == false ]; then

			if [ "$2" == "2" ]; then
				echo "$date_line $1" >&2 
				echo -e "$date_line \e[31m$1\e[0m"
			else
				echo "$date_line $1"
			fi
		fi

		# to logfile
		echo "$date_line $1" >> $LOG_FILE 2> /dev/null

		# to syslog
		if [ $SYSLOG == true ]; then
			line="$1"
			#fix lines beginning w/ '->' as logger reads as cl option
			if [ "->" == "${line:0:2}" ]; then
				line="${line:2}"
			fi
			$LOGGER -t $(basename $0) "$line"
		fi
	fi
}

#######################################################################################
#
# Function check if error was logged
#
check_for_error() {
	if [ -s "$LOG_ERROR_FILE" ]; then
		log "ERROR: $(cat $LOG_ERROR_FILE)" "2"
		execute_notification
		exit 1
	fi
}

#######################################################################################
#
# Function log error
#
log_error() {
	echo "$1" > $LOG_ERROR_FILE
	check_for_error
}

#######################################################################################
#
# Function Issue a snapshot for the source zfs path
#
create_fs_snap() {
	SnapName="$SNAP_PREF$($DATE +%Y%m%d%H%M%S)"
	log "$SRC_PATH@$SnapName snapshot creation."
	output=$( $ZFS snapshot $RECURSIVE_SNAP $SRC_PATH\@$SnapName 2> $LOG_ERROR_FILE )
	log "$output"
	check_for_error
}

#######################################################################################
#
# Function check if the destination zfs path exists and assign the result to the
# variable target_fs_name.
#
target_fs_exists() {
	[ $DEBUG = true ] && log "check if target file exists"
	[ $DEBUG = true ] && log "DEBUG: ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -o name -H $TGT_PATH 2> $LOG_ERROR_FILE | tail -1"
	target_fs_name=$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -o name -H $TGT_PATH 2> $LOG_ERROR_FILE | tail -1 )
	if [ -s "$LOG_ERROR_FILE" ]; 	
	then
		path_error=$(grep "$TGT_PATH" $LOG_ERROR_FILE)
		if [ "$path_error" == "" ];
 		then
			check_for_error
		else
			rm $LOG_ERROR_FILE
			log "$TGT_PATH file system does not exist on target host $TGT_HOST."
		fi
	fi
}

#######################################################################################
#
# Function issue zfs list commands and assign the variables the last snapshot names for
# both the source and destination hosts.
#
check_last_source_snap() {
	[ $DEBUG = true ] && log "find last source snapshot"
	[ $DEBUG = true ] && log "DEBUG: $ZFS list -o name -t snapshot -H 2> $LOG_ERROR_FILE | grep $SRC_PATH\@$SNAP_PREF | tail -1"
	last_snap_source=$( $ZFS list -o name -t snapshot -H 2> $LOG_ERROR_FILE | grep $SRC_PATH\@$SNAP_PREF | tail -1 )
	check_for_error
	if [ "$last_snap_source" == "" ]
	then
		log_error "There is no snapshots in source filesystem $SRC_PATH"
	fi
}

#######################################################################################
#
# Function issue zfs list commands and assign the variables the last snapshot names for
# both the source and destination hosts.
#
check_last_target_snap() {
	[ $DEBUG = true ] && log "find last target snapshot"
	[ $DEBUG = true ] && log "DEBUG: ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -r -t snapshot 2> $LOG_ERROR_FILE | grep $TGT_PATH\@ | tail -1"
	last_snap_target=$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -r -t snapshot 2> $LOG_ERROR_FILE | grep $TGT_PATH\@ | tail -1 )
	check_for_error
	if [ "$last_snap_target" == "" ]
	then
		log_error "There is no snapshots in target filesystem $TGT_PATH"
	fi
}

#######################################################################################
#
# Function replicate filesystem
#
replicate_fs() {

	local action=$1
	
	[ $DEBUG = true ] && log "replicate fs action: $action"

	check_last_source_snap 

	# enable SSH compression
	if [ $COMPRESSION = true ]; then
		ZFS_SEND_COMPRESS="-c -L"
	fi

	case $action in 
		init)
			# create and replicate source to target
			log "$last_snap_source Initial replication."

			ZFS_SEND="$ZFS send -p $ZFS_SEND_COMPRESS $RECURSIVE_REPL $last_snap_source"
			ZFS_RECV="$RMT_ZFS recv $VERBOSE $FORCE_RECV $TGT_PATH"
			;;		
		repl)
			# replicate source to target
			check_last_target_snap 
			stringpos=0
			let stringpos=$(expr index "$last_snap_target" @)
			last_snap_target=$SRC_PATH@${last_snap_target:$stringpos}

			[ $DEBUG = true ] && log "last source snapshot $last_snap_source"
			[ $DEBUG = true ] && log "last target snapshot $last_snap_target"

			if [ "$last_snap_target" != "$last_snap_source" ]; then
				log "$last_snap_target $last_snap_source Incremental send."

				ZFS_SEND="$ZFS send $ZFS_SEND_COMPRESS $RECURSIVE_REPL -I  $last_snap_target $last_snap_source"
				ZFS_RECV="$RMT_ZFS recv $VERBOSE $FORCE_RECV $TGT_PATH"
			else
				log "replication up to date."
				return
			fi
			;;
		*)
			log_error "unknown action $action"
			;;
	esac

	case "$PROTOCOL" in
		# using ssh (for remote networks)
		SSH)
			SRC_PIPELINE_CMDS="$ZFS_SEND | ssh $SSH_OPTS $SSH_TGT_HOST $SSH_TGT_PORT \"$ZFS_RECV\""

			if [ $DEBUG = true ]; then
				log "DEBUG: $SRC_PIPELINE_CMDS"
			fi
			log "$( eval $SRC_PIPELINE_CMDS 2> $LOG_ERROR_FILE )"
			;;
			
		SSHMBUFFER)
			SRC_PIPELINE_CMDS="$ZFS_SEND | $MBUFFER $MBUFFER_OPTS | ssh $SSH_OPTS $SSH_TGT_HOST $SSH_TGT_PORT \"$RMT_MBUFFER $RMT_MBUFFER_OPTS | $ZFS_RECV\""

			if [ $DEBUG = true ]; then
				log "DEBUG: $SRC_PIPELINE_CMDS"
			fi
			log "$( eval $SRC_PIPELINE_CMDS 2> $LOG_ERROR_FILE )"
			;;

		MBUFFER)
			SRC_PIPELINE_CMDS="$ZFS_SEND | $MBUFFER $MBUFFER_OPTS -O $TGT_HOST:$MBUFFER_PORT"
			DST_PIPELINE_CMDS="$RMT_MBUFFER $RMT_MBUFFER_OPTS -I $MBUFFER_PORT | $ZFS_RECV"

			if [ $DEBUG = true ]; then
				log "DEBUG: Source pipeline = $SRC_PIPELINE_CMDS"
				log "DEBUG: Destination pipeline = ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT \"$DST_PIPELINE_CMDS\""
			fi
			# start 'zfs send' pipeline
			#  The timing of when to start sender differs between systems and the current load on the receiver.  This trick keeps everyone in sync.
			#  The pipeline waits until 'zfs receive' pipeline is ready with '---' in $LOG_ERROR_FILE
		
			replication_status init
			(c=0;t=0; while [ $c -eq 0 ]; do sleep 1; [ -s $LOG_ERROR_FILE ] && c=$(grep -c ^---$ $LOG_ERROR_FILE); t=$(( t + 1 )); if [ $t -gt $MBUFFER_INIT_TIMEOUT ]; then kill 0; exit 1; fi; done; eval $SRC_PIPELINE_CMDS 2>> $LOG_ERROR_FILE ) &

			# start 'zfs receive' pipeline
			#  pipeline echos '---' to stderr (i.e. $LOG_ERROR_FILE) to indicate ready to start
			log "$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT "echo '---' 1>&2; eval $DST_PIPELINE_CMDS" 2>> $LOG_ERROR_FILE )"
			replication_status finished
			
			# remove start indicator (i.e. "---") for $LOG_ERROR_FILE
			sed -i '/^---$/d' $LOG_ERROR_FILE
			;;
	esac

	check_for_error
}

#######################################################################################
#
# Function build transport protocol, etc pipelines
#
build_pipelines() {

	case $PROTOCOL in
		MBUFFER)
			PROTOCOL_SRC_PIPE="$MBUFFER $MBUFFER_OPTS -O $TGT_HOST:$MBUFFER_PORT"
			PROTOCOL_DST_PIPE="$RMT_MBUFFER $RMT_MBUFFER_OPTS -I $MBUFFER_PORT"
			;;
		*)
			unset PROTOCOL_SRC_PIPE
			unset PROTOCOL_DST_PIPE
			;;
	esac
	
	# construct the pipelines now
	SRC_PIPELINE[0]="$ZFS_SEND"
	if [ ! -z "$PROTOCOL_SRC_PIPE" ]; then
		SRC_PIPELINE[${#SRC_PIPELINE[@]}]="$PROTOCOL_SRC_PIPE"
	fi
	if [ ! -z "$PROTOCOL_DST_PIPE" ]; then
		DST_PIPELINE[${#DST_PIPELINE[@]}]="$PROTOCOL_DST_PIPE"
	fi
	DST_PIPELINE[${#DST_PIPELINE[@]}]="$ZFS_RECV"

	# Build commands to eval
	SRC_PIPELINE_CMDS="${SRC_PIPELINE[0]}"
	pl=${#SRC_PIPELINE[@]}
	for (( i=1; i<${pl}; i++ ));
	do
		SRC_PIPELINE_CMDS="${SRC_PIPELINE_CMDS} | ${SRC_PIPELINE[$i]}"
	done

	DST_PIPELINE_CMDS="${DST_PIPELINE[0]}"
	pl=${#DST_PIPELINE[@]}
	for (( i=1; i<${pl}; i++ ));
	do
		DST_PIPELINE_CMDS="${DST_PIPELINE_CMDS} | ${DST_PIPELINE[$i]}"
	done

	# pipelines built
}

#######################################################################################
#
# Function to clean up snapshots that are in target host but not in source
#   CLI options/switches change logic/behavior of this function
#   --invert-clean with --prefix - deletes target snaps that don't have the specified prefix
#   --invert-clean w/out --prefix - does not affect logic of target snaps deletion
#   --recurse - causes target snaps to be searched recursively for deletion evaluation
#   --force-clean - deletes target snaps that match criteria ignoring if source has snap
#
clean_remote_snaps() {
	local GREP_OPT=""
	local RECUSIVE_SEARCH=""
	
	# invert snapshot selection with 'grep -v'
	if [ $INVERT_CLEAN == true ]; then
		GREP_OPT="-v"
	fi
	
	if [ -n $RECURSIVE_SNAP ]; then
		RECUSIVE_SEARCH=".*"
	fi

	ssnap_list=$($ZFS list -H -o name -t snapshot | grep ^$SRC_PATH | grep $GREP_OPT ^$SRC_PATH${RECUSIVE_SEARCH}\@)

	ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -t snapshot | grep ^$TGT_PATH | grep $GREP_OPT ^$TGT_PATH${RECUSIVE_SEARCH}\@ > $DSNAP_LIST
	
	while read dsnap
	do
		# replace target path with source path
		SnapName=${SRC_PATH}${dsnap:${#TGT_PATH}}

		if [ $DEBUG = true ]; then
			log "DEBUG: Check if dest snapshot $dsnap in source"
		fi

		if [ $FORCE_CLEAN == true ] || [ $(echo $ssnap_list | grep -c ${SnapName}) -eq 0 ]; then
			log "Destroying snapshot $dsnap on $TGT_HOST because not in source"
			log "$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS destroy $dsnap )"
		fi

	done < $DSNAP_LIST
	
		if [ -f $DSNAP_LIST ]; then
		rm $DSNAP_LIST
	fi
}

#######################################################################################
#
# Function to create a clone of the last available snapshot
# if clone exists it is destroyed
#
clone_source_last_snap() {

	# find last remote snap using prefix
	if [ $DEBUG = true ]; then
		log "DEBUG: Checking last remote snapshot for clone"
	fi
	last_snap_source=$( $ZFS list -H -o name -r -t snapshot 2> $LOG_ERROR_FILE | grep $SRC_PATH\@${SNAP_PREF} | tail -1 )
	check_for_error

	if [ "$last_snap_source" == "" ]; then
		log_error "There is no snapshots in source filesystem $SRC_PATH\@${SNAP_PREF}"
	else
		# check if target clone already exist
		if [ $DEBUG = true ]; then
			log "DEBUG: Checking if clone already exists"
		fi
		clone_exists=$( $ZFS list -H -o name -r 2> $LOG_ERROR_FILE | grep $SRC_CLONE | tail -1 )
		check_for_error

		# if exists, check if it is a clone and destroy it, else raise error
		if [ "$clone_exists" == "$SRC_CLONE" ]; then
			if [ $DEBUG = true ]; then
				log "DEBUG: Clone already exist, verifying it is a clone"
			fi
			clone_source=$( $ZFS get -H -o value origin $SRC_CLONE 2> $LOG_ERROR_FILE )
			check_for_error

			if [ "$clone_source" == "-" ]; then
				log_error "A source filesystem exist with same name as required clone"
			else
				log "Destroying existing clone"
				$ZFS destroy $SRC_CLONE 2> $LOG_ERROR_FILE
				check_for_error
				clone_exists=""
			fi
		fi

		# if not exists, clone now
		if [ "$clone_exists" != "$SRC_CLONE" ]; then
			log "Creating source clone $SRC_CLONE $SRC_CLONE_OPTS"
			$ZFS clone $last_snap_source $SRC_CLONE $SRC_CLONE_OPTS 2> $LOG_ERROR_FILE
			check_for_error
		fi
	fi
}

#######################################################################################
#
# Function to create a clone of the last remote available snapshot
# if clone exists it is destroyed
#
clone_remote_last_snap() {

	# find last remote snap using prefix
	if [ $DEBUG = true ]; then
		log "DEBUG: Checking last remote snapshot for clone"
	fi
	last_snap_target=$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -r -t snapshot 2> $LOG_ERROR_FILE | grep $TGT_PATH\@${SNAP_PREF} | tail -1 )
	check_for_error

	if [ "$last_snap_target" == "" ]; then
		log_error "There is no snapshots in target filesystem $TGT_PATH\@${SNAP_PREF}"
	else
		# check if target clone already exist
		if [ $DEBUG = true ]; then
			log "DEBUG: Checking if clone already exists"
		fi
		clone_exists=$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -r 2> $LOG_ERROR_FILE | grep $TGT_CLONE | tail -1 )
		check_for_error

		# if exists, check if it is a clone and destroy it, else raise error
		if [ "$clone_exists" == "$TGT_CLONE" ]; then
			if [ $DEBUG = true ]; then
				log "DEBUG: Clone already exist, verifying it is a clone"
			fi
			clone_source=$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS get -H -o value origin $TGT_CLONE 2> $LOG_ERROR_FILE )
			check_for_error

			if [ "$clone_source" == "-" ]; then
				log_error "A target filesystem exist with same name as required clone"
			else
				log "Destroying existing clone"
				ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS destroy $TGT_CLONE 2> $LOG_ERROR_FILE
				check_for_error
				clone_exists=""
			fi
		fi

		# if not exists, clone now
		if [ "$clone_exists" != "$TGT_CLONE" ]; then
			log "Creating target clone $TGT_CLONE $TGT_CLONE_OPTS"
			ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS clone $last_snap_target $TGT_CLONE $TGT_CLONE_OPTS 2> $LOG_ERROR_FILE
			check_for_error
		fi
	fi
}

#######################################################################################
#
# Function to clean up snapshots that are older than X days old. X being the 
# value set by "MAX_TIME" on both the source and destination hosts.
# the last snapshot should not be deleted, at least one snapshot must be keeped
#
clean_old_snaps() {
	check_last_source_snap  

	$ZFS list -H -o name -t snapshot -r $SRC_PATH | grep  $SRC_PATH\@$SNAP_PREF > $SNAP_LIST

	RetainDateTime=$($DATE +%Y%m%d%H%M%S --date="$MAX_TIME")
	while read snaps
	do
		if [ "$last_snap_source" != $snaps ]; then
			SnapDateTime=${snaps:( ${#SRC_PATH} + ${#SNAP_PREF} + 1 )}

			#  need to ensure $SnapDateTime is numeric and 14 digits for comparison to $RetainDateTime
			if [ $( echo ${SnapDateTime} | grep -c '^[0-9]*$' ) -eq 1 ] && [ ${#SnapDateTime} -eq 14 ]; then
				if [ $RetainDateTime -gt $SnapDateTime ]
				then
					log "Destroying snapshot $snaps on localhost"
					log "$($ZFS destroy $RECURSIVE_SNAP $snaps)"
				fi
			fi
		fi
	done < $SNAP_LIST
	
	if [ -f $SNAP_LIST ]; then
		rm $SNAP_LIST
	fi

	# check target systems' snaps and cleanup as needed
	if [ $REPLICATE == true ]; then
		ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS list -H -o name -t snapshot -r $TGT_PATH | grep ^$TGT_PATH\@${SNAP_PREF} > $DSNAP_LIST

		RetainDateTime=$($DATE +%Y%m%d%H%M%S --date="$RMT_MAX_TIME")
		while read dsnaps
		do
			SnapDateTime=${dsnaps:( ${#TGT_PATH} + ${#SNAP_PREF} + 1 )}
		
			# skip snapshots w/ non-numeric suffixes
			#  if no prefix then all snapshot will be returned
			#  need to ensure $SnapDateTime is numeric for comparison to $RetainDateTime
			if [ $( echo ${SnapDateTime} | grep -c '^[0-9]*$' ) -eq 1 ] && [ ${#SnapDateTime} -eq 14 ]; then
				if [ $RetainDateTime -gt $SnapDateTime ]; then
					log "Destroying snapshot $TGT_PATH@$SNAP_PREF$SnapDateTime on $TGT_HOST"
					log "$( ssh $SSH_OPTS -n $SSH_TGT_HOST $SSH_TGT_PORT $RMT_ZFS destroy $RECURSIVE_SNAP $TGT_PATH\@$SNAP_PREF$SnapDateTime )"
				fi
			fi
		done < $DSNAP_LIST
		if [ -f $DSNAP_LIST ]; then
			rm $DSNAP_LIST
		fi
	fi
}

#######################################################################################
#####################################Main Entery#######################################
#######################################################################################

## local configuration, chek if file exists,
if [ -f $CONFIG_PATH/$CONFIG_SOURCE.conf ]; then
  . $CONFIG_PATH/$CONFIG_SOURCE.conf
else
  echo "Configuration file $CONFIG_PATH/$CONFIG_SOURCE.conf not found."
  echo "Execute $CONFIG_PATH/source-config $CONFIG_SOURCE to create it and edit it to fill required settings"
  exit 1
fi

[ $# -eq 0 ] && usage

while [ $# -gt 0 ];do
     case "$1" in
         -H|--host)
             shift
             SSH_TGT_HOST=$1
             let pos=$(expr index "$SSH_TGT_HOST" @)
             TGT_HOST=${SSH_TGT_HOST:$pos}
             [ -z $TGT_HOST ] && TGT_HOST=$SSH_TGT_HOST
             
             ## remote host configuration (optional)
             [ -f $CONFIG_PATH/hosts/$TGT_HOST.conf ] && . $CONFIG_PATH/hosts/$TGT_HOST.conf

             ;;
         -p|--port)
             shift
             SSH_TGT_PORT="-p$1"
             if [[ $SSH_TGT_PORT != ^[0-9]+$ ]]; then
             	echo "Incorrect value $1. -p|--port must be numeric"
             	usage
             fi
             ;;
         -s|--source)
             shift
             SRC_PATH=$1
             ;;
         -d|--dest)
			 shift
             TGT_PATH=$1
             ;;
         -f|--prefix)
             shift
             SNAP_PREF="$1"
             ;;
         -t|--snap-retain)
             shift
             MAX_TIME="$1"
             ;;
         -T|--dest-snap-retain)
             shift
             RMT_MAX_TIME="$1"
             ;;
         -o|--protocol)
             shift
           	 case ${1^^} in
         	 	SSH|SSHMBUFFER|MBUFFER)
         	 		PROTOCOL=${1^^}
         	 		;;
         	 	*)
         	 		echo "Incorrect protocol value $PROTOCOL. Valid -o|--protocol values: SSH SSHMBUFFER MBUFFER"
         	 		usage
         	 		;;
 	 		 esac
             ;;
         -P|--mbuffer-port)
             shift
             if [[ $1 =~ ^[0-9]+$ || $1 == "auto" ]]; then
             	MBUFFER_PORT=$1
         	else
             	echo "Incorrect port value $1. -P|--mbuffer-port must be numeric or 'auto'"
             	usage
             fi
             
             ;;
         -O|--dest-opt)
         	shift
         	if [[ $1 == *=* ]]; then
         		ZFS_CREATE_OPTS="$ZFS_CREATE_OPTS -o $1"
         	else
         		echo "Incorrect zfs create property $1. Please see 'man zfs' for details and syntax."
         		usage
         	fi
            ;;
         --dest-clone)
            shift
            TGT_CLONE=$1
            ;;
         --dest-clone-opt)
         	shift
         	if [[ $1 == *=* ]]; then
         		TGT_CLONE_OPTS="$TGT_CLONE_OPTS -o $1"
         	else
         		echo "Incorrect zfs create property $1. Please see 'man zfs' for details and syntax."
         		usage
         	fi
            ;;
         --source-clone)
            shift
            SRC_CLONE=$1
            ;;
         --source-clone-opt)
         	shift
         	if [[ $1 == *=* ]]; then
         		SRC_CLONE_OPTS="$SRC_CLONE_OPTS -o $1"
         	else
         		echo "Incorrect zfs create property $1. Please see 'man zfs' for details and syntax."
         		usage
         	fi
            ;;
         -c|--clean-snaps)
            CLEAN=true
            ;;
         --invert-clean)
            INVERT_CLEAN=true
            ;;
         --clean-after)
            CLEAN_AFTER=true
            ;;
         --force-clean)
            FORCE_CLEAN=true
            ;; 
         -n|--no-snap)
            SNAPSHOT=false
            ;;
         -r|--no-repl)
            REPLICATE=false
            ;;
         --notify-errors)
            NOTIFY_ON_ERROR=true
            ;;
         --notify)
            NOTIFY_ON_SUCCESS=true
            ;;
         --no-notify)
            NOTIFY_ON_ERROR=false
            NOTIFY_ON_SUCCESS=false
            ;;
         -z|--create-dest)
            CREATEFS=true
            ;;
         -v|--verbose)
            VERBOSE=-v
            ;;
         -q|--quiet)
         	QUIET=true
         	;;
         --debug)
            DEBUG=true
            ;;
         -R|--recurse)
     		RECURSIVE_SNAP='-r'
     		RECURSIVE_REPL='-R'
     		;;
         -F|--force-recv)
            FORCE_RECV='-F'
            ;;
         -h|--help)
         	usage
         	;;
         *)
         	echo "Invalid option $1."
            usage
            ;;
     esac
     shift
done

# lock & err file isolation based on source path
src_path_hash=${SRC_PATH//\//#}

# lock file to avoid concurrent replication
LOCK_FILE=$LOCK_PATH/$(basename $0 .sh)-${src_path_hash}

# Check if replication is running
if [ -e "$LOCK_FILE" ]; then
	log_error "ERROR: replication is currently running."
	exit 1
fi

# create isolated tmp directory
mkdir -p $TMP_PATH > /dev/null 2>&1
[ $DEBUG = true ] && log "TMP_PATH = $TMP_PATH"

# save target name as first line of log
log "Target host: $TGT_HOST source: $SRC_PATH"

# file for simple ok message
echo "Replication of $SRC_PATH to $TGT_HOST ok" > $LOG_SUCCESS_FILE

#register exit/clean up tasks
on_exit_run replication_status
on_exit_run execute_notification
on_exit_run	log "end-------------------------------------------------------------"
[ $DEBUG = false ] && on_exit_run rm -rf $TMP_PATH
on_exit_run rm -f $LOCK_FILE

# check and complete parameters
if [ -z $SRC_PATH ]; then
	echo "Missing parameter source path -s|--source"
	usage
fi
if [[ ($REPLICATE == true) ]]; then
	if [ -z $TGT_HOST ]; 	then
		echo "Missing parameter target host -H|--host"
		usage
	fi
	if [ -z $TGT_PATH ]; 	then
		TGT_PATH=$SRC_PATH
	fi
	if [ -z $PROTOCOL ]; then
		echo "Transport protocol must be specified. See -o|--protocol options."
		usage
	fi
	# pick a port to use
	if [ $MBUFFER_PORT = auto ]; then
		MBUFFER_PORT=$($SHUF -i $MBUFFER_PORT_RANGE -n 1)
	fi
	# -T option not specified use -t option value
	if [ -z "$RMT_MAX_TIME" ]; then
		RMT_MAX_TIME="$MAX_TIME"
	fi
fi

# check we have commands to run options specified
launch_check

# set the lock flag w/ pid
touch $LOCK_FILE > /dev/null 2>&1
if [ $? -gt 0 ]; then
	echo "ERROR: unable to create lock file: $LOCK_FILE"
	exit 1
fi
echo $$ > $LOCK_FILE

#Create a new snapshot of the path spec.
if [ $SNAPSHOT == true ]; then
	create_fs_snap
fi

# Send the snapshots to the target and create the fs if required
if [ $REPLICATE == true ]; then
	# Test for the existence of zfs file system path on the target host.
	target_fs_exists

	if [ -z $target_fs_name ]; then
		# Create a first time replication.
		if [ $CREATEFS == true ]; then
			replicate_fs init
		else
			log "Use option -z|--create-dest to create file system in target host"
		fi
	else
		# Clean up any snapshots in target that is not in source
		if [ $CLEAN == true ]; then
			clean_remote_snaps 2> $LOG_ERROR_FILE
			check_for_error
		fi

		# Initiate a dif replication.
		replicate_fs repl 2> $LOG_ERROR_FILE
		check_for_error

		# Clean up any snapshots in target that is not in source
		if [ $CLEAN_AFTER == true ]; then
			clean_remote_snaps 2> $LOG_ERROR_FILE
			check_for_error
		fi
		
		# Clean up any snapshots that are old.
		if [ "$MAX_TIME" != "" ]; then
			clean_old_snaps 2> $LOG_ERROR_FILE
			check_for_error
		fi

		# clone last target snapshot
		if [ "$TGT_CLONE" != "" ]; then
			clone_remote_last_snap 2> $LOG_ERROR_FILE
			check_for_error
		fi
	fi
else
	# Clean up any snapshots that are old.
	if [ -n "$MAX_TIME" ]; then
		clean_old_snaps 2> $LOG_ERROR_FILE
		check_for_error
	fi
fi

# clone last source snapshot
if [ "$SRC_CLONE" != "" ]; then
	clone_source_last_snap 2> $LOG_ERROR_FILE
	check_for_error
fi

exit 0
